// This file was generated by gir (c3b4020) from gir-files (71d73f0)
// DO NOT EDIT

use Actionable;
use Bin;
use CheckMenuItem;
use Container;
use MenuItem;
use Widget;
use ffi;
use glib::object::Downcast;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct RadioMenuItem(Object<ffi::GtkRadioMenuItem>): CheckMenuItem, MenuItem, Bin, Container, Widget, Actionable;

    match fn {
        get_type => || ffi::gtk_radio_menu_item_get_type(),
    }
}

impl RadioMenuItem {
    pub fn new(group: &[RadioMenuItem]) -> RadioMenuItem {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_radio_menu_item_new(group.to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn new_from_widget(group: Option<&RadioMenuItem>) -> RadioMenuItem {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_radio_menu_item_new_from_widget(group.to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn new_with_label(group: &[RadioMenuItem], label: &str) -> RadioMenuItem {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_radio_menu_item_new_with_label(group.to_glib_none().0, label.to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn new_with_label_from_widget<'a, T: Into<Option<&'a str>>>(group: Option<&RadioMenuItem>, label: T) -> RadioMenuItem {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_radio_menu_item_new_with_label_from_widget(group.to_glib_none().0, label.into().to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn new_with_mnemonic(group: &[RadioMenuItem], label: &str) -> RadioMenuItem {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_radio_menu_item_new_with_mnemonic(group.to_glib_none().0, label.to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn new_with_mnemonic_from_widget<'a, T: Into<Option<&'a str>>>(group: Option<&RadioMenuItem>, label: T) -> RadioMenuItem {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_radio_menu_item_new_with_mnemonic_from_widget(group.to_glib_none().0, label.into().to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn get_group(&self) -> Vec<RadioMenuItem> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gtk_radio_menu_item_get_group(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_18")]
    pub fn join_group(&self, group_source: Option<&RadioMenuItem>) {
        unsafe {
            ffi::gtk_radio_menu_item_join_group(self.to_glib_none().0, group_source.to_glib_none().0);
        }
    }

    pub fn set_group(&self, group: &[RadioMenuItem]) {
        unsafe {
            ffi::gtk_radio_menu_item_set_group(self.to_glib_none().0, group.to_glib_none().0);
        }
    }

    pub fn connect_group_changed<F: Fn(&RadioMenuItem) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&RadioMenuItem) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "group-changed",
                transmute(group_changed_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn group_changed_trampoline(this: *mut ffi::GtkRadioMenuItem, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&RadioMenuItem) + 'static> = transmute(f);
    f(&from_glib_none(this))
}
