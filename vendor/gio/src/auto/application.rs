// This file was generated by gir (c3b4020) from gir-files (71d73f0)
// DO NOT EDIT

use ActionGroup;
use ActionMap;
use ApplicationFlags;
use Object;
use ffi;
#[cfg(feature = "v2_44")]
use glib;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct Application(Object<ffi::GApplication>): ActionGroup, ActionMap;

    match fn {
        get_type => || ffi::g_application_get_type(),
    }
}

impl Application {
    pub fn new<'a, T: Into<Option<&'a str>>>(application_id: T, flags: ApplicationFlags) -> Application {
        unsafe {
            from_glib_full(ffi::g_application_new(application_id.into().to_glib_none().0, flags.to_glib()))
        }
    }

    pub fn get_default() -> Option<Application> {
        unsafe {
            from_glib_none(ffi::g_application_get_default())
        }
    }

    pub fn id_is_valid(application_id: &str) -> bool {
        unsafe {
            from_glib(ffi::g_application_id_is_valid(application_id.to_glib_none().0))
        }
    }
}

pub trait ApplicationExt {
    fn activate(&self);

    //#[cfg(feature = "v2_42")]
    //fn add_main_option<'a, T: Into<Option<&'a str>>>(&self, long_name: &str, short_name: /*Unimplemented*/Fundamental: Char, flags: /*Ignored*/glib::OptionFlags, arg: /*Ignored*/glib::OptionArg, description: &str, arg_description: T);

    //#[cfg(feature = "v2_40")]
    //fn add_main_option_entries(&self, entries: /*Ignored*/&[&glib::OptionEntry]);

    //#[cfg(feature = "v2_40")]
    //fn add_option_group(&self, group: /*Ignored*/&glib::OptionGroup);

    #[cfg(feature = "v2_44")]
    fn bind_busy_property<T: IsA<glib::Object>>(&self, object: &T, property: &str);

    fn get_application_id(&self) -> Option<String>;

    //#[cfg(feature = "v2_34")]
    //fn get_dbus_connection(&self) -> /*Ignored*/Option<DBusConnection>;

    #[cfg(feature = "v2_34")]
    fn get_dbus_object_path(&self) -> Option<String>;

    fn get_flags(&self) -> ApplicationFlags;

    fn get_inactivity_timeout(&self) -> u32;

    #[cfg(feature = "v2_44")]
    fn get_is_busy(&self) -> bool;

    fn get_is_registered(&self) -> bool;

    fn get_is_remote(&self) -> bool;

    #[cfg(feature = "v2_42")]
    fn get_resource_base_path(&self) -> Option<String>;

    fn hold(&self);

    #[cfg(feature = "v2_38")]
    fn mark_busy(&self);

    //fn open(&self, files: /*Ignored*/&[File], n_files: i32, hint: &str);

    fn quit(&self);

    //fn register(&self, cancellable: /*Ignored*/Option<&Cancellable>) -> Result<(), Error>;

    fn release(&self);

    fn run(&self, argc: i32, argv: &[&str]) -> i32;

    //#[cfg(feature = "v2_40")]
    //fn send_notification<'a, T: Into<Option<&'a str>>>(&self, id: T, notification: /*Ignored*/&Notification);

    fn set_action_group<T: IsA<ActionGroup>>(&self, action_group: Option<&T>);

    fn set_application_id<'a, T: Into<Option<&'a str>>>(&self, application_id: T);

    fn set_default(&self);

    fn set_flags(&self, flags: ApplicationFlags);

    fn set_inactivity_timeout(&self, inactivity_timeout: u32);

    #[cfg(feature = "v2_42")]
    fn set_resource_base_path<'a, T: Into<Option<&'a str>>>(&self, resource_path: T);

    #[cfg(feature = "v2_44")]
    fn unbind_busy_property<T: IsA<glib::Object>>(&self, object: &T, property: &str);

    #[cfg(feature = "v2_38")]
    fn unmark_busy(&self);

    #[cfg(feature = "v2_40")]
    fn withdraw_notification(&self, id: &str);

    fn set_property_action_group(&self, action_group: Option<&ActionGroup>);

    fn get_property_application_id(&self) -> Option<String>;

    fn set_property_application_id(&self, application_id: Option<&str>);

    fn get_property_flags(&self) -> ApplicationFlags;

    fn set_property_flags(&self, flags: ApplicationFlags);

    fn get_property_inactivity_timeout(&self) -> u32;

    fn set_property_inactivity_timeout(&self, inactivity_timeout: u32);

    fn get_property_is_registered(&self) -> bool;

    fn get_property_is_remote(&self) -> bool;

    fn get_property_resource_base_path(&self) -> Option<String>;

    fn set_property_resource_base_path(&self, resource_base_path: Option<&str>);

    fn connect_activate<F: Fn(&Self) + 'static>(&self, f: F) -> u64;

    //fn connect_command_line<Unsupported or ignored types>(&self, f: F) -> u64;

    //#[cfg(feature = "v2_40")]
    //fn connect_handle_local_options<Unsupported or ignored types>(&self, f: F) -> u64;

    //fn connect_open<Unsupported or ignored types>(&self, f: F) -> u64;

    fn connect_shutdown<F: Fn(&Self) + 'static>(&self, f: F) -> u64;

    fn connect_startup<F: Fn(&Self) + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<Application> + IsA<Object>> ApplicationExt for O {
    fn activate(&self) {
        unsafe {
            ffi::g_application_activate(self.to_glib_none().0);
        }
    }

    //#[cfg(feature = "v2_42")]
    //fn add_main_option<'a, T: Into<Option<&'a str>>>(&self, long_name: &str, short_name: /*Unimplemented*/Fundamental: Char, flags: /*Ignored*/glib::OptionFlags, arg: /*Ignored*/glib::OptionArg, description: &str, arg_description: T) {
    //    unsafe { TODO: call ffi::g_application_add_main_option() }
    //}

    //#[cfg(feature = "v2_40")]
    //fn add_main_option_entries(&self, entries: /*Ignored*/&[&glib::OptionEntry]) {
    //    unsafe { TODO: call ffi::g_application_add_main_option_entries() }
    //}

    //#[cfg(feature = "v2_40")]
    //fn add_option_group(&self, group: /*Ignored*/&glib::OptionGroup) {
    //    unsafe { TODO: call ffi::g_application_add_option_group() }
    //}

    #[cfg(feature = "v2_44")]
    fn bind_busy_property<T: IsA<glib::Object>>(&self, object: &T, property: &str) {
        unsafe {
            ffi::g_application_bind_busy_property(self.to_glib_none().0, object.to_glib_none().0, property.to_glib_none().0);
        }
    }

    fn get_application_id(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_application_get_application_id(self.to_glib_none().0))
        }
    }

    //#[cfg(feature = "v2_34")]
    //fn get_dbus_connection(&self) -> /*Ignored*/Option<DBusConnection> {
    //    unsafe { TODO: call ffi::g_application_get_dbus_connection() }
    //}

    #[cfg(feature = "v2_34")]
    fn get_dbus_object_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_application_get_dbus_object_path(self.to_glib_none().0))
        }
    }

    fn get_flags(&self) -> ApplicationFlags {
        unsafe {
            from_glib(ffi::g_application_get_flags(self.to_glib_none().0))
        }
    }

    fn get_inactivity_timeout(&self) -> u32 {
        unsafe {
            ffi::g_application_get_inactivity_timeout(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v2_44")]
    fn get_is_busy(&self) -> bool {
        unsafe {
            from_glib(ffi::g_application_get_is_busy(self.to_glib_none().0))
        }
    }

    fn get_is_registered(&self) -> bool {
        unsafe {
            from_glib(ffi::g_application_get_is_registered(self.to_glib_none().0))
        }
    }

    fn get_is_remote(&self) -> bool {
        unsafe {
            from_glib(ffi::g_application_get_is_remote(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_42")]
    fn get_resource_base_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_application_get_resource_base_path(self.to_glib_none().0))
        }
    }

    fn hold(&self) {
        unsafe {
            ffi::g_application_hold(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_38")]
    fn mark_busy(&self) {
        unsafe {
            ffi::g_application_mark_busy(self.to_glib_none().0);
        }
    }

    //fn open(&self, files: /*Ignored*/&[File], n_files: i32, hint: &str) {
    //    unsafe { TODO: call ffi::g_application_open() }
    //}

    fn quit(&self) {
        unsafe {
            ffi::g_application_quit(self.to_glib_none().0);
        }
    }

    //fn register(&self, cancellable: /*Ignored*/Option<&Cancellable>) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_application_register() }
    //}

    fn release(&self) {
        unsafe {
            ffi::g_application_release(self.to_glib_none().0);
        }
    }

    fn run(&self, argc: i32, argv: &[&str]) -> i32 {
        unsafe {
            ffi::g_application_run(self.to_glib_none().0, argc, argv.to_glib_none().0)
        }
    }

    //#[cfg(feature = "v2_40")]
    //fn send_notification<'a, T: Into<Option<&'a str>>>(&self, id: T, notification: /*Ignored*/&Notification) {
    //    unsafe { TODO: call ffi::g_application_send_notification() }
    //}

    fn set_action_group<T: IsA<ActionGroup>>(&self, action_group: Option<&T>) {
        unsafe {
            ffi::g_application_set_action_group(self.to_glib_none().0, action_group.to_glib_none().0);
        }
    }

    fn set_application_id<'a, T: Into<Option<&'a str>>>(&self, application_id: T) {
        unsafe {
            ffi::g_application_set_application_id(self.to_glib_none().0, application_id.into().to_glib_none().0);
        }
    }

    fn set_default(&self) {
        unsafe {
            ffi::g_application_set_default(self.to_glib_none().0);
        }
    }

    fn set_flags(&self, flags: ApplicationFlags) {
        unsafe {
            ffi::g_application_set_flags(self.to_glib_none().0, flags.to_glib());
        }
    }

    fn set_inactivity_timeout(&self, inactivity_timeout: u32) {
        unsafe {
            ffi::g_application_set_inactivity_timeout(self.to_glib_none().0, inactivity_timeout);
        }
    }

    #[cfg(feature = "v2_42")]
    fn set_resource_base_path<'a, T: Into<Option<&'a str>>>(&self, resource_path: T) {
        unsafe {
            ffi::g_application_set_resource_base_path(self.to_glib_none().0, resource_path.into().to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_44")]
    fn unbind_busy_property<T: IsA<glib::Object>>(&self, object: &T, property: &str) {
        unsafe {
            ffi::g_application_unbind_busy_property(self.to_glib_none().0, object.to_glib_none().0, property.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_38")]
    fn unmark_busy(&self) {
        unsafe {
            ffi::g_application_unmark_busy(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_40")]
    fn withdraw_notification(&self, id: &str) {
        unsafe {
            ffi::g_application_withdraw_notification(self.to_glib_none().0, id.to_glib_none().0);
        }
    }

    fn set_property_action_group(&self, action_group: Option<&ActionGroup>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "action-group".to_glib_none().0, Value::from(action_group).to_glib_none().0);
        }
    }

    fn get_property_application_id(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "application-id".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_application_id(&self, application_id: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "application-id".to_glib_none().0, Value::from(application_id).to_glib_none().0);
        }
    }

    fn get_property_flags(&self) -> ApplicationFlags {
        let mut value = Value::from(&0u32);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "flags".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<u32>().unwrap()))
        }
    }

    fn set_property_flags(&self, flags: ApplicationFlags) {
        let flags = flags.to_glib().bits() as u32;
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "flags".to_glib_none().0, Value::from(&flags).to_glib_none().0);
        }
    }

    fn get_property_inactivity_timeout(&self) -> u32 {
        let mut value = Value::from(&0u32);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "inactivity-timeout".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_inactivity_timeout(&self, inactivity_timeout: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "inactivity-timeout".to_glib_none().0, Value::from(&inactivity_timeout).to_glib_none().0);
        }
    }

    fn get_property_is_registered(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "is-registered".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn get_property_is_remote(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "is-remote".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn get_property_resource_base_path(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "resource-base-path".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_resource_base_path(&self, resource_base_path: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "resource-base-path".to_glib_none().0, Value::from(resource_base_path).to_glib_none().0);
        }
    }

    fn connect_activate<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "activate",
                transmute(activate_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    //fn connect_command_line<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    Ignored command_line: Gio.ApplicationCommandLine
    //}

    //#[cfg(feature = "v2_40")]
    //fn connect_handle_local_options<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    Ignored options: GLib.VariantDict
    //}

    //fn connect_open<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    Ignored files: *.CArray TypeId { ns_id: 1, id: 15 }
    //}

    fn connect_shutdown<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "shutdown",
                transmute(shutdown_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_startup<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "startup",
                transmute(startup_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn activate_trampoline<T>(this: *mut ffi::GApplication, f: glib_ffi::gpointer)
where T: IsA<Application> {
    callback_guard!();
    let f: &Box_<Fn(&T) + 'static> = transmute(f);
    f(&Application::from_glib_none(this).downcast_unchecked())
}

unsafe extern "C" fn shutdown_trampoline<T>(this: *mut ffi::GApplication, f: glib_ffi::gpointer)
where T: IsA<Application> {
    callback_guard!();
    let f: &Box_<Fn(&T) + 'static> = transmute(f);
    f(&Application::from_glib_none(this).downcast_unchecked())
}

unsafe extern "C" fn startup_trampoline<T>(this: *mut ffi::GApplication, f: glib_ffi::gpointer)
where T: IsA<Application> {
    callback_guard!();
    let f: &Box_<Fn(&T) + 'static> = transmute(f);
    f(&Application::from_glib_none(this).downcast_unchecked())
}
