// This file was generated by gir (c3b4020) from gir-files (71d73f0)
// DO NOT EDIT

use Action;
use ffi;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct ActionMap(Object<ffi::GActionMap>);

    match fn {
        get_type => || ffi::g_action_map_get_type(),
    }
}

pub trait ActionMapExt {
    fn add_action<T: IsA<Action>>(&self, action: &T);

    //fn add_action_entries(&self, entries: /*Ignored*/&[&ActionEntry], n_entries: i32, user_data: /*Unimplemented*/Option<Fundamental: Pointer>);

    fn lookup_action(&self, action_name: &str) -> Option<Action>;

    fn remove_action(&self, action_name: &str);
}

impl<O: IsA<ActionMap>> ActionMapExt for O {
    fn add_action<T: IsA<Action>>(&self, action: &T) {
        unsafe {
            ffi::g_action_map_add_action(self.to_glib_none().0, action.to_glib_none().0);
        }
    }

    //fn add_action_entries(&self, entries: /*Ignored*/&[&ActionEntry], n_entries: i32, user_data: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call ffi::g_action_map_add_action_entries() }
    //}

    fn lookup_action(&self, action_name: &str) -> Option<Action> {
        unsafe {
            from_glib_none(ffi::g_action_map_lookup_action(self.to_glib_none().0, action_name.to_glib_none().0))
        }
    }

    fn remove_action(&self, action_name: &str) {
        unsafe {
            ffi::g_action_map_remove_action(self.to_glib_none().0, action_name.to_glib_none().0);
        }
    }
}
